(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{560:function(n,s,a){"use strict";a.r(s);var e=a(3),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("以前看某本书上讲：")]),n._v(" "),a("blockquote",[a("p",[n._v("掌握了 JS 中 this 的用法才算真正的跨过 了 JS 的门槛 我深以为是！")])]),n._v(" "),a("p",[n._v("但是 JS 的 this 却并不是那么简单的内容，许多同学都很困惑，也肯定有同学像我曾经一样查阅各种资料想知")]),n._v(" "),a("p",[n._v("道"),a("code",[n._v("How to understand this of javascript")]),n._v("。很幸运的是，网上有非常非常多的文章关于"),a("code",[n._v("this")]),n._v("的，简")]),n._v(" "),a("p",[n._v("直就是琳琅满目…曾经，我看到某些文章非常开心，因为他们讲得确实非常好，以至于我确信我已掌握了")]),n._v(" "),a("p",[n._v("this 的用法。然而可能是由于我太笨了，经常过一段时间就忘得一干二净了，这真的是一件很尴尬的事情……")]),n._v(" "),a("p",[n._v("直到后来我仔细地琢磨又琢磨，终于感觉我可能以后不会再忘记了。所以想把我琢磨的内容和大家分享一下")]),n._v(" "),a("p",[n._v("说到 this，就不得不提到 function，相信看过其它类似文章的同学也知道，正是由于调用 function 的对象不")]),n._v(" "),a("p",[n._v("同，才导致了 this 的指向不同。所以以前老是去记忆每种调用 function 的情况所对应的 this，因为情况有限而")]),n._v(" "),a("p",[n._v("且很少，所以这当然是可行的——对于聪明人来说。所以我不得不思考另外一些方式来让我记住。")]),n._v(" "),a("p",[n._v("那么首先我们需要明确的一个事情是：function 也是对象")]),n._v(" "),a("p",[n._v("同时我们还需要明确的一个事情是：function 执行时是在某个特定的上下文中执行的。那什么是上下文呢？")]),n._v(" "),a("p",[n._v("打个比方，比如你练会了辟邪剑谱，那这时候你的掌门让你用辟邪剑谱砍人。如果仅仅是这样的话，你是没")]),n._v(" "),a("p",[n._v("法完成这个任务的，因为你必须得知道要砍谁吧，其次去哪儿砍吧，那么是个地下通道还是一望无尽的大草")]),n._v(" "),a("p",[n._v("原，要是地下通道你走路都困难，还怎么用辟邪剑谱呢对吧。这就是上下文，函数执行时它也需要一些额外")]),n._v(" "),a("p",[n._v("的信息来支撑它的运行。那么既然 function 是对象的话，就会有方法。而 function 中最核心的方法是 call 方")]),n._v(" "),a("p",[n._v("法。因此我们就从这儿入手。")]),n._v(" "),a("h2",{attrs:{id:"call-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-方法"}},[n._v("#")]),n._v(" call 方法")]),n._v(" "),a("p",[n._v("先来看一下如何使用 call 方法:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function say(content) { console.log("From " + this + ": Hello "+ content); }\nsay.call("Bob", "World"); //==> From Bob: Hello World\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("接下来仔细分析一下 call 的用法：")]),n._v(" "),a("ul",[a("li",[n._v("Step1: 把第二个到最后一个参数作为函数执行时要传入的参数")]),n._v(" "),a("li",[n._v("Step2: 把函数执行时的 this 指向第一个参数")]),n._v(" "),a("li",[n._v('Step3: 在上面这个特殊的上下文中执行函数\n上面例子中，我们通过 call 方法，让 say 函数执行时的 this 指向"Bob"，然后把"World"作为参数传进去，所以输出结果是可以预见的。')])]),n._v(" "),a("h4",{attrs:{id:"js-执行函数时会默认完成以上的步骤-你可以把直接调用函数理解为一种语法糖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-执行函数时会默认完成以上的步骤-你可以把直接调用函数理解为一种语法糖"}},[n._v("#")]),n._v(" js 执行函数时会默认完成以上的步骤，你可以把直接调用函数理解为一种语法糖")]),n._v(" "),a("p",[n._v("比如")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function say(word) { console.log(world); }\nsay("Hello world"); say.call(window, "Hello world");\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v('以上可以把 say("Hello world")看做是 say.call(window,"Hello world")的语法糖。')]),n._v(" "),a("p",[n._v("这个结论非常关键 所以以后每次看见 functionName(xxx)的时候，你需要马上在脑海中把它替换为")]),n._v(" "),a("p",[n._v("functionName.call(window,xxxx)，这对你理解 this 的指向非常重要。不过也有例外，在 ES5 的 strict mode")]),n._v(" "),a("p",[n._v("中 call 的第一个参数不是 window 而是 undefined。之后的例子我假设总是不在 strictmode 下，但你需要记住")]),n._v(" "),a("p",[n._v("strictmode 有一点儿不同。 对于匿名函数来说，上面的结论也是成立的")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(' (function(name) { // })("aa"); //等价于 (function(name) { // }).call(window, "aa");\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("函数作为对象的方法被调用")]),n._v(" "),a("p",[n._v("直接来看代码：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('var person = {\nname : "caibirdme",\nrun : function(time) {\nconsole.log(this.name + "has been running for over "+ time+ " minutes");\n} };\nperson.run(30); //==> caibirdme has been running for over 30 minutes //等价于 person.run.call(person, 30); // the same\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("你会发现这里 call 的第一个参数是 person 而不是 window。")]),n._v(" "),a("p",[n._v("当你明白了这两点，下意识地把函数调用翻译成 foo.call()的形式，明确 call 的第一个参数，那基本上 this 的问")]),n._v(" "),a("p",[n._v("题就难不住你了。")]),n._v(" "),a("p",[n._v("还是来举几个例子吧")]),n._v(" "),a("p",[n._v("例一：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function hello(thing) {\nconsole.log(this + " says hello " + thing);\n}\nperson = { name: "caibirdme" }\nperson.hello = hello;\nperson.hello("world") // 相当于执行 person.hello.call(person, "world") //caibirdme says hello world hello("world") // 相当于执行 hello.call(window, "world") //[object DOMWindow]world\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("例二：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var obj = {\n x: 20,\n f: function(){\nconsole.log(this.x);\n } };\nobj.f(); // obj.f.call(obj) //==> 20\nobj.innerobj = {\n x: 30,\nf: function(){\nconsole.log(this.x);\n} }\nobj.innerobj.f(); // obj.innerobj.f.call(obj.innerobj) // ==> 30\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("例三：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var x = 10;\nvar obj = {\nx: 20, f: function(){\nconsole.log(this.x); //this equals obj // ==> 20\nvar foo = function(){\nconsole.log(this.x);\n}\nfoo(); // foo.call(window) //foo中this被指定为window，所以==> 10 } }; obj.f(); // obj.f.call(obj) // ==> 20 10\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("由例三引出一个非常 common 的问题，如果我想让 foo 输出 20 怎么办？这时候需要用到一点小技巧")]),n._v(" "),a("p",[n._v("例四：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var x = 10;\nvar obj = {\nx: 20,\nf: function(){\nconsole.log(this.x);\nvar that = this; //使用that保留当前函数执行上下文的this\nvar foo = function(){ console.log(that.x); } //此时foo函数中的this仍然指向window，但我们使用that取得obj foo(); // foo.call(window) } };\nobj.f();\nobj.f.call(obj) // ==> 20 20\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("再来一个稍微难一点点的(但其实用 call 替换法一点儿也不难)")]),n._v(" "),a("p",[n._v("例五：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var x = 10;\nvar obj = {\nx: 20,\nf: function(){\nconsole.log(this.x);\n} };\nobj.f(); // obj.f.call(obj) // ==> 20\nvar fOut = obj.f;\n fOut(); // fOut.call(window) //==> 10\nvar obj2 = { x: 30, f: obj.f } obj2.f(); // obj2.f.call(obj2) //==> 30\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("例五有些同学会可能出错的原因，是没有明确我上面说的：")]),n._v(" "),a("h6",{attrs:{id:"this-是在执行是才会被确认的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-是在执行是才会被确认的"}},[n._v("#")]),n._v(" this 是在执行是才会被确认的")]),n._v(" "),a("p",[n._v("他可能会认为说 obj.f 那个函数定义在 obj 里面，那 this 就该指向 obj。如果看完这篇文章你还这么想的话，我")]),n._v(" "),a("p",[n._v("会觉得我的表达水平太失败了…… 用于构造函数 先看一段代码：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(' func person(name) { this.name = name; }\nvar caibirdme = new person("deen"); // caibirdme.name == deen\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("我上面也说了，函数在用作构造函数时同样可以用 call 方法去代替，那这里怎么代替呢？")]),n._v(" "),a("p",[n._v("这里你又需要明确一点：")]),n._v(" "),a("h6",{attrs:{id:"new-constrcut-是一种创建对象的语法糖-它等价于"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-constrcut-是一种创建对象的语法糖-它等价于"}},[n._v("#")]),n._v(" "),a("code",[n._v("new constrcut()")]),n._v("是一种创建对象的语法糖 它等价于")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function person(name) { this.name = name; }\nvar foo = new person("deen"); //通过new创建了一个对象 //new是一种语法糖，new person等价于 var bar = (function(name) { var _newObj = { constructor : person, __proto__ : person.prototype, };\n _newObj.constructor(name); // _newObj.constructor.call(_newObj, name) return _newObj; })();\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("So you can see……为什么 new 的时候 this 就指向新的对象了吧？")]),n._v(" "),a("p",[n._v("通过我这篇文章，我希望学会通过把一个函数调用替换成 funcName.call 的形式，从而理解运行时上下文中")]),n._v(" "),a("p",[n._v("this 到底指向谁。")]),n._v(" "),a("p",[n._v("总结来说就是下面两个等价变形：")]),n._v(" "),a("ul",[a("li",[n._v("foo() ---\x3e foo.call(window)")]),n._v(" "),a("li",[n._v("obj.foo() --\x3e obj.foo.call(obj) 只要理解以上两个变形，this 就不再是问题啦")])])])}),[],!1,null,null,null);s.default=t.exports}}]);